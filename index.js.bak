/*JANGAN CURI CASE LAH BRO:(
CAPEK GUA BIKIN MA YOGI BROO:)
AWAS AJA CURI CASE/NUMPANG NAMA DOANG
KALO DIKASI KREDIT GPP:)
DIKASI ENAK JAN NGELUNJAK YA
CASE ANTIDELETE? BELI DI YOGI PW:)
GA KASI KREDIT GABAKAL DI UPDATE INI SC:)*/

//wa connection
const {
   WAConnection,
   MessageType,
   Presence,
   MessageOptions,
   Mimetype,
   WALocationMessage,
   WA_MESSAGE_STUB_TYPES,
   ReconnectMode,
   ProxyAgent,
   GroupSettingChange,
   waChatKey,
   mentionedJid,
   processTime,
} = require("@adiwajshing/baileys")
const qrcode = require("qrcode-terminal") 
const moment = require("moment-timezone") 
const fs = require("fs") 
const crypto = require('crypto')
const imageToBase64 = require('image-to-base64')
const axios = require('axios')
const { color, bgcolor } = require('./lib/color')
const { bahasa } = require('./lib/bahasa')
const { negara } = require('./lib/kodenegara')
const { donasi } = require('./lib/donasi')
const { infown } = require('./lib/infown')
const { snk } = require('./lib/snk')
const { developer } = require('./lib/developer')
const { fetchJson } = require('./lib/fetcher')
const { recognize } = require('./lib/ocr')
const fontPath = ('./lib/Zahraaa.ttf')
const { exec } = require("child_process")
const { wait, simih, getBuffer, h2k, generateMessageID, getGroupAdmins, getRandom, banner, start, info, success, close } = require('./lib/functions')
const tiktod = require('tiktok-scraper')
const brainly = require('brainly-scraper')
const ffmpeg = require('fluent-ffmpeg')
const FormData = require('form-data')
const imgbb = require('imgbb-uploader')
const cd = 4.32e+7
const { removeBackgroundFromImageFile } = require('remove.bg')
const { ind } = require('./asu')

//kontak
const vcard1 = 'BEGIN:VCARD\n' 
              + 'VERSION:3.0\n' 
              + 'FN:Yogiツ\n' //ganti nama lu! 
              + 'ORG: Owner YD-BOT;\n' 
              + 'TEL;type=CELL;type=VOICE;waid=6283152753417:+62 83152753417\n'  //ganti nomor lu! 
              + 'END:VCARD'
             
const vcard2 = 'BEGIN:VCARD\n' 
              + 'VERSION:3.0\n' 
              + 'FN:Dappaツ\n' //ganti nama lu! 
              + 'ORG: Owner YD-BOT;\n' 
              + 'TEL;type=CELL;type=VOICE;waid=6285876330812:+62 85876330812\n'  //ganti nomor lu! 
              + 'END:VCARD'
            
//settings            
prefix = '#'
blocked = []   
limitawal = '30'
memberlimit = 1
cr = '*𝐘𝐃-𝐁𝐎𝐓 𝐕𝐄𝐑𝐈𝐅𝐈𝐄𝐃*'

NamaOwner = '𝖸𝗈𝗀𝗂𝖯𝗐&𝖣𝖺𝗉𝗉𝖺𝖴𝗁𝗎𝗒'
NamaBot = 'YD-BOT'

//owner number
const ownerNumber = ["6285876330812@s.whatsapp.net","6283152753417@s.whatsapp.net"]   //ganti nomor lu! 
       
//file json
const _leveling = JSON.parse(fs.readFileSync('./database/group/leveling.json'))
const _level = JSON.parse(fs.readFileSync('./database/user/level.json'))
const _registered = JSON.parse(fs.readFileSync('./database/bot/registered.json'))
const welkom = JSON.parse(fs.readFileSync('./database/bot/welkom.json'))
const nsfw = JSON.parse(fs.readFileSync('./database/bot/nsfw.json'))
const samih = JSON.parse(fs.readFileSync('./database/bot/simi.json'))
const event = JSON.parse(fs.readFileSync('./database/bot/event.json'))
const _limit = JSON.parse(fs.readFileSync('./database/user/limit.json'))
const uang = JSON.parse(fs.readFileSync('./database/user/uang.json'))
const ban = JSON.parse(fs.readFileSync('./database/user/banned.json'))
const antilink = JSON.parse(fs.readFileSync('./database/group/antilink.json'))
const bad = JSON.parse(fs.readFileSync('./database/group/bad.json'))
const badword = JSON.parse(fs.readFileSync('./database/group/badword.json'))

//function
const getLevelingXp = (sender) => {
            let position = false
            Object.keys(_level).forEach((i) => {
                if (_level[i].id === sender) {
                    position = i
                }
            })
            if (position !== false) {
                return _level[position].xp
            }
        }

        const getLevelingLevel = (sender) => {
            let position = false
            Object.keys(_level).forEach((i) => {
                if (_level[i].id === sender) {
                    position = i
                }
            })
            if (position !== false) {
                return _level[position].level
            }
        }

        const getLevelingId = (sender) => {
            let position = false
            Object.keys(_level).forEach((i) => {
                if (_level[i].id === sender) {
                    position = i
                }
            })
            if (position !== false) {
                return _level[position].id
            }
        }

        const addLevelingXp = (sender, amount) => {
            let position = false
            Object.keys(_level).forEach((i) => {
                if (_level[i].id === sender) {
                    position = i
                }
            })
            if (position !== false) {
                _level[position].xp += amount
                fs.writeFileSync('./database/user/level.json', JSON.stringify(_level))
            }
        }

        const addLevelingLevel = (sender, amount) => {
            let position = false
            Object.keys(_level).forEach((i) => {
                if (_level[i].id === sender) {
                    position = i
                }
            })
            if (position !== false) {
                _level[position].level += amount
                fs.writeFileSync('./database/user/level.json', JSON.stringify(_level))
            }
        }

        const addLevelingId = (sender) => {
            const obj = {id: sender, xp: 1, level: 1}
            _level.push(obj)
            fs.writeFileSync('./database/user/level.json', JSON.stringify(_level))
        }
        
        const getLimit = (sender) => {
        	let position = false
              Object.keys(limit).forEach ((i) => {
              	if (limit[position].id === sender) {
              	   position = i
                  }
              })
             if (position !== false) {
                return limit[position].limit
            }
        }
             
         const getRegisteredRandomId = () => {
            return _registered[Math.floor(Math.random() * _registered.length)].id
        }

        const addRegisteredUser = (userid, sender, age, time, serials) => {
            const obj = { id: userid, name: sender, age: age, time: time, serial: serials }
            _registered.push(obj)
            fs.writeFileSync('./database/bot/registered.json', JSON.stringify(_registered))
        }

        const createSerial = (size) => {
            return crypto.randomBytes(size).toString('hex').slice(0, size)
        }

        const checkRegisteredUser = (sender) => {
            let status = false
            Object.keys(_registered).forEach((i) => {
                if (_registered[i].id === sender) {
                    status = true
                }
            })
            return status
        }
        
        const addATM = (sender) => {
        	const obj = {id: sender, uang : 0}
            uang.push(obj)
            fs.writeFileSync('./database/user/uang.json', JSON.stringify(uang))
        }
        
        const addKoinUser = (sender, amount) => {
            let position = false
            Object.keys(uang).forEach((i) => {
                if (uang[i].id === sender) {
                    position = i
                }
            })
            if (position !== false) {
                uang[position].uang += amount
                fs.writeFileSync('./database/user/uang.json', JSON.stringify(uang))
            }
        }
        
        const checkATMuser = (sender) => {
        	let position = false
            Object.keys(uang).forEach((i) => {
                if (uang[i].id === sender) {
                    position = i
                }
            })
            if (position !== false) {
                return uang[position].uang
            }
        }
        
        const bayarLimit = (sender, amount) => {
        	let position = false
            Object.keys(_limit).forEach((i) => {
                if (_limit[i].id === sender) {
                    position = i
                }
            })
            if (position !== false) {
                _limit[position].limit -= amount
                fs.writeFileSync('./database/user/limit.json', JSON.stringify(_limit))
            }
        }
        	
        const confirmATM = (sender, amount) => {
        	let position = false
            Object.keys(uang).forEach((i) => {
                if (uang[i].id === sender) {
                    position = i
                }
            })
            if (position !== false) {
                uang[position].uang -= amount
                fs.writeFileSync('./database/user/uang.json', JSON.stringify(uang))
            }
        }
        
            const limitAdd = (sender) => {
             let position = false
            Object.keys(_limit).forEach((i) => {
                if (_limit[i].id == sender) {
                    position = i
                }
            })
            if (position !== false) {
                _limit[position].limit += 1
                fs.writeFileSync('./database/user/limit.json', JSON.stringify(_limit))
            }
        }


        
function kyun(seconds){
  function pad(s){
    return (s < 10 ? '0' : '') + s;
  }
  var hours = Math.floor(seconds / (60*60));
  var minutes = Math.floor(seconds % (60*60) / 60);
  var seconds = Math.floor(seconds % 60);

  //return pad(hours) + ':' + pad(minutes) + ':' + pad(seconds)
  return `${pad(hours)} Jam ${pad(minutes)} Menit ${pad(seconds)} Detik`
}

//function
const dapyog = new WAConnection()
dapyog.logger.level = 'warn'
console.log(banner.string)
   dapyog.on('qr', qr => {
   qrcode.generate(qr, { small: true })
	console.log(color('(+)','white'), color('DappaGanz','red'), color('(+)','white'), color(' SQAN CODENYA','aqua'), color('SUBREK YT DappaUhuy','yellow'))
})

	dapyog.on('credentials-updated', () => {
		fs.writeFileSync('./dappauhy.json', JSON.stringify(dapyog.base64EncodedAuthInfo(), null, '\t'))
		info('2', 'info!')
	})
	fs.existsSync('./dappauhy.json') && dapyog.loadAuthInfo('./dappauhy.json')
	dapyog.on('connecting', () => {
		start('2', color('[ ! ]Scan Codenya Ngab','aqua'))
	})
	dapyog.on('open', () => {
		success('2', color('[ ! ]Tersambung','red'))
	})
	dapyog.connect({timeoutMs: 30*1000})


dapyog.on('group-participants-update', async (anu) => {
		if (!welkom.includes(anu.jid)) return
		try {
			const mdata = await dapyog.groupMetadata(anu.jid)
			console.log(anu)
			if (anu.action == 'add') {
				num = anu.participants[0]
				try {
					ppimg = await dapyog.getProfilePicture(`${anu.participants[0].split('@')[0]}@c.us`)
				} catch {
					ppimg = 'https://i0.wp.com/www.gambarunik.id/wp-content/uploads/2019/06/Top-Gambar-Foto-Profil-Kosong-Lucu-Tergokil-.jpg'
				}
				teks = `Hallo @${num.split('@')[0]}\Selamat datang di group *${mdata.subject}* yang betah ya di sini`
				let buff = await getBuffer(ppimg)
				dapyog.sendMessage(mdata.id, buff, MessageType.image, {caption: teks, contextInfo: {"mentionedJid": [num]}})
			} else if (anu.action == 'remove') {
				num = anu.participants[0]
				try {
					ppimg = await dapyog.getProfilePicture(`${num.split('@')[0]}@c.us`)
				} catch {
					ppimg = 'https://i0.wp.com/www.gambarunik.id/wp-content/uploads/2019/06/Top-Gambar-Foto-Profil-Kosong-Lucu-Tergokil-.jpg'
				}
				teks = `Sayonara @${num.split('@')[0]}👋🍁`
				let buff = await getBuffer(ppimg)
				dapyog.sendMessage(mdata.id, buff, MessageType.image, {caption: teks, contextInfo: {"mentionedJid": [num]}})
			}
		} catch (e) {
			console.log('Error : %s', color(e, 'red'))
		}
	})
	dapyog.on('CB:Blocklist', json => {
		if (blocked.length > 2) return
	    for (let i of json[1].blocklist) {
	    	blocked.push(i.replace('c.us','s.whatsapp.net'))
	    }
	})

	dapyog.on('message-new', async (mek) => {
		try {
		
			if (!mek.message) return
			if (mek.key && mek.key.remoteJid == 'status@broadcast') return
			if (mek.key.fromMe) return
			global.prefix
			global.blocked
			const content = JSON.stringify(mek.message)
			const from = mek.key.remoteJid
			const type = Object.keys(mek.message)[0]
			const { text, extendedText, contact, location, liveLocation, image, video, sticker, document, audio, product } = MessageType
			const time = moment.tz('Asia/Jakarta').format('DD/MM HH:mm:ss')
			const timi = moment.tz('Asia/Jakarta').add(30, 'days').calendar();
			const timu = moment.tz('Asia/Jakarta').add(20, 'days').calendar();
            body = (type === 'conversation' && mek.message.conversation.startsWith(prefix)) ? mek.message.conversation : (type == 'imageMessage') && mek.message.imageMessage.caption.startsWith(prefix) ? mek.message.imageMessage.caption : (type == 'videoMessage') && mek.message.videoMessage.caption.startsWith(prefix) ? mek.message.videoMessage.caption : (type == 'extendedTextMessage') && mek.message.extendedTextMessage.text.startsWith(prefix) ? mek.message.extendedTextMessage.text : ''
			budy = (type === 'conversation') ? mek.message.conversation : (type === 'extendedTextMessage') ? mek.message.extendedTextMessage.text : ''
			var pes = (type === 'conversation' && mek.message.conversation) ? mek.message.conversation : (type == 'imageMessage') && mek.message.imageMessage.caption ? mek.message.imageMessage.caption : (type == 'videoMessage') && mek.message.videoMessage.caption ? mek.message.videoMessage.caption : (type == 'extendedTextMessage') && mek.message.extendedTextMessage.text ? mek.message.extendedTextMessage.text : ''
			const messagesC = pes.slice(0).trim().split(/ +/).shift().toLowerCase()
			const command = body.slice(1).trim().split(/ +/).shift().toLowerCase()
			var Link = (type === 'conversation' && mek.message.conversation) ? mek.message.conversation : (type == 'imageMessage') && mek.message.imageMessage.caption ? mek.message.imageMessage.caption : (type == 'videoMessage') && mek.message.videoMessage.caption ? mek.message.videoMessage.caption : (type == 'extendedTextMessage') && mek.message.extendedTextMessage.text ? mek.message.extendedTextMessage.text : ''
			const messagesLink = Link.slice(0).trim().split(/ +/).shift().toLowerCase()
			var tas = (type === 'conversation' && mek.message.conversation) ? mek.message.conversation : (type == 'imageMessage') && mek.message.imageMessage.caption ? mek.message.imageMessage.caption : (type == 'videoMessage') && mek.message.videoMessage.caption ? mek.message.videoMessage.caption : (type == 'extendedTextMessage') && mek.message.extendedTextMessage.text ? mek.message.extendedTextMessage.text : ''
			const mesejAnti = tas.slice(0).trim().split(/ +/).shift().toLowerCase()
			const args = body.trim().split(/ +/).slice(1)
			const isCmd = body.startsWith(prefix)
			const tescuk = ["0@s.whatsapp.net"]
			const isGroup = from.endsWith('@g.us')
			const q = args.join(' ')
			const botNumber = dapyog.user.jid
			const sender = isGroup ? mek.participant : mek.key.remoteJid
			pushname = dapyog.contacts[sender] != undefined ? dapyog.contacts[sender].vname || dapyog.contacts[sender].notify : undefined
			const groupMetadata = isGroup ? await dapyog.groupMetadata(from) : ''
			const groupName = isGroup ? groupMetadata.subject : ''
			const groupId = isGroup ? groupMetadata.jid : ''
			const groupMembers = isGroup ? groupMetadata.participants : ''
			const groupDesc = isGroup ? groupMetadata.desc : ''
            const groupAdmins = isGroup ? getGroupAdmins(groupMembers) : ''
            
            /************** SCURITY FEATURE ************/
            const isEventon = isGroup ? event.includes(from) : false
            const isRegistered = checkRegisteredUser(sender)
            const isBotGroupAdmins = groupAdmins.includes(botNumber) || false
            const isLevelingOn = isGroup ? _leveling.includes(from) : false
			const isGroupAdmins = groupAdmins.includes(sender) || false
			const isWelkom = isGroup ? welkom.includes(from) : false
			const isNsfw = isGroup ? nsfw.includes(from) : false
			const isSimi = isGroup ? samih.includes(from) : false
			const isAntiLink = isGroup ? antilink.includes(from) : false
			const isBadWord = isGroup ? badword.includes(from) : false
			const isOwner = ownerNumber.includes(sender)
			const isBanned = ban.includes(sender)
			const isImage = type === 'imageMessage'
			const isUrl = (url) => {
			    return url.match(new RegExp(/https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)/, 'gi'))
			}
			const reply = (teks) => {
				dapyog.sendMessage(from, teks, text, {quoted:mek})
			}
			const sendMess = (hehe, teks) => {
				dapyog.sendMessage(hehe, teks, text)
			}
			const mentions = (teks, memberr, id) => {
				(id == null || id == undefined || id == false) ? dapyog.sendMessage(from, teks.trim(), extendedText, {contextInfo: {"mentionedJid": memberr}}) : dapyog.sendMessage(from, teks.trim(), extendedText, {quoted: mek, contextInfo: {"mentionedJid": memberr}})
			}
			const sendImage = (teks) => {
		    dapyog.sendMessage(from, teks, image, {quoted:mek})
		    }
		    const costum = (pesan, tipe, target, target2) => {
			dapyog.sendMessage(from, pesan, tipe, {quoted: { key: { fromMe: false, participant: `${target}`, ...(from ? { remoteJid: from } : {}) }, message: { conversation: `${target2}` }}})
			}
		    const sendPtt = (teks) => {
		    dapyog.sendMessage(from, audio, mp3, {quoted:mek})
		    }
	        /*****************END SCURITY FEATURE ********/

			
			
	        //function leveling
            if (isGroup && isRegistered && isLevelingOn) {
            const currentLevel = getLevelingLevel(sender)
            const checkId = getLevelingId(sender)
            try {
                if (currentLevel === undefined && checkId === undefined) addLevelingId(sender)
                const amountXp = Math.floor(Math.random() * 10) + 500
                const requiredXp = 5000 * (Math.pow(2, currentLevel) - 1)
                const getLevel = getLevelingLevel(sender)
                addLevelingXp(sender, amountXp)
                if (requiredXp <= getLevelingXp(sender)) {
                    addLevelingLevel(sender, 1)
                    await reply(ind.levelup(pushname, sender, getLevelingXp,  getLevel, getLevelingLevel))
                }
            } catch (err) {
                console.error(err)
            }
        }
          //function check limit
          const checkLimit = (sender) => {
          	let found = false
                    for (let lmt of _limit) {
                        if (lmt.id === sender) {
                            let limitCounts = limitawal - lmt.limit
                            if (limitCounts <= 0) return dapyog.sendMessage(from,`Limit request anda sudah habis\n\n_Note : Limit akan direset setiap jam 21:00!_`, text,{ quoted: mek})
                            dapyog.sendMessage(from, ind.limitcount(limitCounts), text, { quoted : mek})
                            found = true
                        }
                    }
                    if (found === false) {
                        let obj = { id: sender, limit: 1 }
                        _limit.push(obj)
                        fs.writeFileSync('./database/user/limit.json', JSON.stringify(_limit))
                        dapyog.sendMessage(from, ind.limitcount(limitCounts), text, { quoted : mek})
                    }
				}
				
			//funtion limited
           const isLimit = (sender) =>{ 
		      let position = false
              for (let i of _limit) {
              if (i.id === sender) {
              	let limits = i.limit
              if (limits >= limitawal ) {
              	  position = true
                    dapyog.sendMessage(from, ind.limitend(pushname), text, {quoted: mek})
                    return true
              } else {
              	_limit
                  position = true
                  return false
               }
             }
           }
           if (position === false) {
           	const obj = { id: sender, limit: 1 }
                _limit.push(obj)
                fs.writeFileSync('./database/user/limit.json',JSON.stringify(_limit))
           return false
       }
     }
     	
        
      
            //function balance
            if (isRegistered && isGroup ) {
            const checkATM = checkATMuser(sender)
            try {
                if (checkATM === undefined) addATM(sender)
                const uangsaku = Math.floor(Math.random() * 10) + 90
                addKoinUser(sender, uangsaku)
            } catch (err) {
                console.error(err)
            }
        }
          
// ANTI LINK GRUP
               	       if (messagesLink.includes("://chat.whatsapp.com/")){
		        if (!isGroup) return
		        if (!isAntiLink) return
		        if (isGroupAdmins) return reply('Admin Grup Mah Bebas:D')
		        dapyog.updatePresence(from, Presence.composing)
		        if (mesejAnti.includes(",izinkak")) return reply("Iya kak jangan spam ya")
		        var kic = `${sender.split("@")[0]}@s.whatsapp.net`
		        reply(`Maaf kak ${sender.split("@")[0]} Grup ini anti link, siap siap kamu di kick`)
		        setTimeout( () => {
			        dapyog.groupRemove(from, [kic]).catch((e)=>{reply(`*DapBOT~ HARUS JADI ADMINâ—*`)})
		        }, 3000)
		        setTimeout( () => {
			        dapyog.updatePresence(from, Presence.composing)
			        reply("Hedsot....")
		        }, 2000)
		        setTimeout( () => {
			        dapyog.updatePresence(from, Presence.composing)
			        reply("Bismillah...")
		        }, 1000)
		        setTimeout( () => {
			        dapyog.updatePresence(from, Presence.composing)
			        reply("Ready?...")
		        }, 0)
		  }
		  
           if (isGroup) {
					try {
						const getmemex = groupMembers.length	
					    if (getmemex <= memberlimit) {
						reply(`hmmm...`)
						setTimeout( () => {
 	                           dapyog.groupLeave(from) 
 					   	}, 5000)
								setTimeout( () => {
								dapyog.updatePresence(from, Presence.composing)
								reply("byee")
							}, 4000)
								setTimeout( () => {
								dapyog.updatePresence(from, Presence.composing)
								reply("awokaowkaowk")
							}, 3000)
								setTimeout( () => {
								dapyog.updatePresence(from, Presence.composing)
								reply("semoga emak lu sehat")
							}, 2000)
								setTimeout( () => {
								dapyog.updatePresence(from, Presence.composing)
								reply("gw keluar ye")
							}, 1000)
								setTimeout( () => {
								dapyog.updatePresence(from, Presence.composing)
								reply(`sorry ngab member minimal ${memberlimit}`)
							}, 0)
					    }
		       } catch (err) { console.error(err)  }
 	       }
 
        	if (bad.includes(messagesLink)) {
		if (!isGroup) return
		if (isGroupAdmins) return reply(`*${pushname}* ᴀᴅᴀʟᴀʜ ᴀᴅᴍɪɴ ɢʀᴏᴜᴘ ᴋᴀᴍᴜ ᴛɪᴅᴀᴋ ᴀᴋᴀɴ ᴅɪ ᴋɪᴄᴋ`)
		var Kick = `${sender.split("@")[0]}@s.whatsapp.net`
		setTimeout( () => {
		reply(`*sᴀʏᴏɴᴀʀᴀ ʙᴇʙᴀɴ ɢʀᴜᴘ*`)
		}, 100)
		setTimeout( () => {
		dapyog.groupRemove(from, [Kick]).catch((e) => {reply(`*ERROR:* ${e}`)}) 
		}, 10)
		setTimeout( () => {
		reply(`*_「 ʙᴀᴅᴡᴏʀᴅ ᴅᴇᴛᴇᴄᴛᴇᴅ 」_*\nᴍᴀᴀғ *${pushname}* ᴀɴᴅᴀ ʙᴇʀʙɪᴄᴀʀᴀ ᴋᴏᴛᴏʀ!, ᴀɴᴅᴀ ꜱᴇɢᴇʀᴀ ᴅɪᴋɪᴄᴋ ᴅᴀʀɪ ɢʀᴜᴘ *${groupMetadata.subject}*`)
		}, 0)
		}

           		  //kolor
			colors = ['red','white','black','blue','yellow','green']
			
			//detector media
			const isMedia = (type === 'imageMessage' || type === 'videoMessage')
			const isQuotedImage = type === 'extendedTextMessage' && content.includes('imageMessage')
			const isQuotedVideo = type === 'extendedTextMessage' && content.includes('videoMessage')
			const isQuotedSticker = type === 'extendedTextMessage' && content.includes('stickerMessage')
			
			//chat message
		if (!isGroup && !isCmd) console.log(color(time, "white"), color("[ PRIVATE ]", "aqua"), color(budy, "white"), "from", color(sender.split('@')[0], "red"))
            if (isGroup && !isCmd) console.log(color([time], "white"), color("[  GROUP  ]", "aqua"), color(budy, "white"), "from", color(sender.split('@')[0], "red"), "in", color(groupName, "white"))
            if (!isGroup && isCmd) console.log(color([time], "white"), color("[ COMMAND ]", "aqua"), color(budy, "white"), "from", color(sender.split('@')[0], "red"))
            if (isGroup && isCmd) console.log(color([time], "white"), color("[ COMMAND ]", "aqua"), color(budy, "white"), "from", color(sender.split('@')[0], "red"), "in", color(groupName, "white"))
			
			switch(command) {
//============================BATES NGAB============================\\
//MAKER MENU
                case 'qrcode':
                //❗case by DappaUhuy&YOGI PW
                if (!isRegistered) return reply(ind.noregis())
                if (isLimit(sender)) return reply(ind.limitend(pusname))
                if (isBanned) return reply(ind.baned())
                if (args.length < 1) return reply(`Teksnya mana ngab?\nContoh ${prefix}qrcode DappaUhuy`)
                dapuhy = body.slice(7)
                reply(ind.wait())
                asu = await getBuffer(`https://api.zeks.xyz/api/qrencode?apikey=apivinz&text=${dapuhy}`)
                dapyog.sendMessage(from, asu, image, {caption: 'Nih Jan Lupa Subscribe DappaUhuy&YOGI PW', quoted: mek})
                await limitAdd(sender)
                break
                case 'barcode':
                //❗case by DappaUhuy&YOGI PW
                if (!isRegistered) return reply(ind.noregis())
                if (isLimit(sender)) return reply(ind.limitend(pusname))
                if (isBanned) return reply(ind.baned())
                if (args.length < 1) return reply(`Teksnya mana ngab?\nContoh ${prefix}barcode DappaUhuy`)
                dapuhy = body.slice(8)
                reply(ind.wait())
                asu = await getBuffer(`https://api.zeks.xyz/api/barcode?apikey=apivinz&text=${dapuhy}`)
                dapyog.sendMessage(from, asu, image, {caption: 'Nih Jan Lupa Subscribe DappaUhuy&YOGI PW', quoted: mek})
                await limitAdd(sender)
                break
                case 'hartatahta':
                //❗case by DappaUhuy&YOGI PW
                if (!isRegistered) return reply(ind.noregis())
                if (isLimit(sender)) return reply(ind.limitend(pusname))
                if (isBanned) return reply(ind.baned())
                if (args.length < 1) return reply(`Teksnya mana ngab?\nContoh ${prefix}hartatahta Dappa`)
                dapuhy = body.slice(11)
                reply(ind.wait())
                asu = await getBuffer(`https://api.zeks.xyz/api/hartatahta?text=${dapuhy}&apikey=apivinz`)
                dapyog.sendMessage(from, asu, image, {caption: 'Nih Jan Lupa Subscribe DappaUhuy&YOGI PW', quoted: mek})
                await limitAdd(sender)
                break
                case 'cup':
				//❗case by DappaUhuy&YOGI PW
				if (!isRegistered) return reply(ind.noregis())
				if (isBanned) return reply(ind.wait())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}cup DappaGanz`)
				reply(ind.wait())
				ct = body.slice(4)
				anu = await fetchJson(`https://dapuhy-apikey.herokuapp.com/api/textmaker/senja?text=${ct}&theme=coffee-cup&apikey=dappabotwa`)
				dapuhy = await getBuffer(anu.result.url)
				dapyog.sendMessage(from, dapuhy, image, { quoted: mek, caption: 'Nih Jan Lupa Subscribe DappaUhuy&YOGI PW' })
				await limitAdd(sender)
				break
				case 'cup2':
				//❗case by DappaUhuy&YOGI PW
				if (!isRegistered) return reply(ind.noregis())
				if (isBanned) return reply(ind.wait())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}cup2 DappaUhuy`)
				reply(ind.wait())
				ct = body.slice(5)
				anu = await fetchJson(`https://dapuhy-apikey.herokuapp.com/api/textmaker/senja?text=${ct}&theme=coffee-cup2&apikey=dappabotwa`)
				dapuhy = await getBuffer(anu.result.url)
				dapyog.sendMessage(from, dapuhy, image, { quoted: mek, caption: 'Nih Jan Lupa Subscribe DappaUhuy&YOGI PW' })
				await limitAdd(sender)
				break
				case 'battlefield':
				//❗case by DappaUhuy&YOGI PW
				if (!isRegistered) return reply(ind.noregis())
				if (isBanned) return reply(ind.wait())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}battlefield Dappa|Ganz`)
				reply(ind.wait())
				ct = body.slice(12)
				dap1 = ct.split("|")[0];
                dap2 = ct.split("|")[1];
				anu = await fetchJson(`https://dapuhy-apikey.herokuapp.com/api/textmaker/game?text=${dap1}&text2=${dap2}&theme=battlefield&apikey=dappabotwa`)
				dapuhy = await getBuffer(anu.result.url)
				dapyog.sendMessage(from, dapuhy, image, { quoted: mek, caption: 'Nih Jan Lupa Subscribe DappaUhuy&YOGI PW' })
				await limitAdd(sender)
				break
				case 'glitchtext':
				//❗case by DappaUhuy&YOGI PW
				if (!isRegistered) return reply(ind.noregis())
				if (isBanned) return reply(ind.wait())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}glitchtext Dappa|Ganz`)
				reply(ind.wait())
				ct = body.slice(11)
				dap1 = ct.split("|")[0];
                dap2 = ct.split("|")[1];
				anu = await fetchJson(`https://dapuhy-apikey.herokuapp.com/api/textmaker?text=${dap1}&text2=${dap2}&theme=glitch&apikey=dappabotwa`)
				dapuhy = await getBuffer(anu.result.url)
				dapyog.sendMessage(from, dapuhy, image, { quoted: mek, caption: 'Nih Jan Lupa Subscribe DappaUhuy&YOGI PW' })
				await limitAdd(sender)
				break
				case 'googlesearch':
				//❗case by DappaUhuy&YOGI PW
				if (!isRegistered) return reply(ind.noregis())
				if (isBanned) return reply(ind.wait())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}googlesearch Dappa|Ganz|Uhuy`)
				reply(ind.wait())
				ct = body.slice(13)
				dap1 = ct.split("|")[0];
                dap2 = ct.split("|")[1];
                dap3 = ct.split("|")[1];
				anu = await fetchJson(`https://dapuhy-apikey.herokuapp.com/api/textmaker?text=${dap1}&text2=${dap2}&text3=${dap3}&theme=google-suggestion&apikey=dappabotwa`)
				dapuhy = await getBuffer(anu.result.url)
				dapyog.sendMessage(from, dapuhy, image, { quoted: mek, caption: 'Nih Jan Lupa Subscribe DappaUhuy&YOGI PW' })
				await limitAdd(sender)
				break
				case 'neon':
				//❗case by DappaUhuy&YOGI PW
				if (!isRegistered) return reply(ind.noregis())
				if (isBanned) return reply(ind.wait())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}neon DappaGanz`)
				reply(ind.wait())
				ct = body.slice(5)
				anu = await fetchJson(`https://dapuhy-apikey.herokuapp.com/api/textmaker/metallic?text=${ct}&theme=neon&apikey=dappabotwa`)
				dapuhy = await getBuffer(anu.result.url)
				dapyog.sendMessage(from, dapuhy, image, { quoted: mek, caption: 'Nih Jan Lupa Subscribe DappaUhuy&YOGI PW' })
				await limitAdd(sender)
				break
				case 'glow':
				//❗case by DappaUhuy&YOGI PW
				if (!isRegistered) return reply(ind.noregis())
				if (isBanned) return reply(ind.wait())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}glow DappaGanz`)
				reply(ind.wait())
				ct = body.slice(5)
				anu = await fetchJson(`https://dapuhy-apikey.herokuapp.com/api/textmaker/metallic?text=${ct}&theme=glow&apikey=dappabotwa`)
				dapuhy = await getBuffer(anu.result.url)
				dapyog.sendMessage(from, dapuhy, image, { quoted: mek, caption: 'Nih Jan Lupa Subscribe DappaUhuy&YOGI PW' })
				await limitAdd(sender)
				break
				case 'summer':
				//❗case by DappaUhuy&YOGI PW
				if (!isRegistered) return reply(ind.noregis())
				if (isBanned) return reply(ind.wait())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}summer DappaGanz`)
				reply(ind.wait())
				ct = body.slice(7)
				anu = await fetchJson(`https://dapuhy-apikey.herokuapp.com/api/textmaker/alam?text=${ct}&theme=summer&apikey=dappabotwa`)
				dapuhy = await getBuffer(anu.result.url)
				dapyog.sendMessage(from, dapuhy, image, { quoted: mek, caption: 'Nih Jan Lupa Subscribe DappaUhuy&YOGI PW' })
				await limitAdd(sender)
				break
				case 'flower':
				//❗case by DappaUhuy&YOGI PW
				if (!isRegistered) return reply(ind.noregis())
				if (isBanned) return reply(ind.wait())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}summer DappaGanz`)
				reply(ind.wait())
				ct = body.slice(7)
				anu = await fetchJson(`https://dapuhy-apikey.herokuapp.com/api/textmaker/alam?text=${ct}&theme=flower&apikey=dappabotwa`)
				dapuhy = await getBuffer(anu.result.url)
				dapyog.sendMessage(from, dapuhy, image, { quoted: mek, caption: 'Nih Jan Lupa Subscribe DappaUhuy&YOGI PW' })
				await limitAdd(sender)
				break
				case 'naruto':
				//❗case by DappaUhuy&YOGI PW
				if (!isRegistered) return reply(ind.noregis())
				if (isBanned) return reply(ind.wait())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
				if (args.length < 1) return reply(`Textnya Mana Cuy?\n*Contoh ${prefix}naruto DappaGanz`)
				reply(ind.wait())
				ct = body.slice(7)
				anu = await fetchJson(`https://api.zeks.xyz/api/naruto?text=${ct}&apikey=apivinz`)
				dapuhy = await getBuffer(anu.result)
				dapyog.sendMessage(from, dapuhy, image, { quoted: mek, caption: 'Nih Jan Lupa Subscribe DappaUhuy&YOGI PW' })
				await limitAdd(sender)
				break
				case 'blueneon':
                //❗case by DappaUhuy&YOGI PW
                if (!isRegistered) return reply(ind.noregis())
                if (isLimit(sender)) return reply(ind.limitend(pusname))
                if (isBanned) return reply(ind.baned())
                if (args.length < 1) return reply(`Teksnya mana ngab?\nContoh ${prefix}blueneon DappaGanz`)
                dapuhy = body.slice(9)
                reply(ind.wait())
                asu = await getBuffer(`https://api.zeks.xyz/api/bneon?apikey=apivinz&text=${dapuhy}`)
                dapyog.sendMessage(from, asu, image, {caption: 'Nih Jan Lupa Subscribe DappaUhuy&YOGI PW', quoted: mek})
                await limitAdd(sender)
                break
                case 'matrix':
                //❗case by DappaUhuy&YOGI PW
                if (!isRegistered) return reply(ind.noregis())
                if (isLimit(sender)) return reply(ind.limitend(pusname))
                if (isBanned) return reply(ind.baned())
                if (args.length < 1) return reply(`Teksnya mana ngab?\nContoh ${prefix}matrix DappaGanz`)
                dapuhy = body.slice(7)
                reply(ind.wait())
                asu = await getBuffer(`https://api.zeks.xyz/api/matrix?apikey=apivinz&text=${dapuhy}`)
                dapyog.sendMessage(from, asu, image, {caption: 'Nih Jan Lupa Subscribe DappaUhuy&YOGI PW', quoted: mek})
                await limitAdd(sender)
                break
                case 'breakwall':
                //❗case by DappaUhuy&YOGI PW
                if (!isRegistered) return reply(ind.noregis())
                if (isLimit(sender)) return reply(ind.limitend(pusname))
                if (isBanned) return reply(ind.baned())
                if (args.length < 1) return reply(`Teksnya mana ngab?\nContoh ${prefix}breakwall DappaGanz`)
                dapuhy = body.slice(10)
                reply(ind.wait())
                asu = await getBuffer(`https://api.zeks.xyz/api/breakwall?apikey=apivinz&text=${dapuhy}`)
                dapyog.sendMessage(from, asu, image, {caption: 'Nih Jan Lupa Subscribe DappaUhuy&YOGI PW', quoted: mek})
                break
				case 'bakarnama':
				//❗case by DappaUhuy&YOGI PW
                if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
				if (isBanned) return reply(ind.baned())
				cuk = body.slice(11)
				reply(ind.wait())
				ct = await getBuffer(`http://zekais-api.herokuapp.com/sbburn?text=${cuk}`)
				client.sendMessage(from, ct, image, {caption: 'Nih Jan Lupa Subscribe DappaUhuy&YOGI PW', quoted: mek})
				await limitAdd(sender)
				break
				case 'breakwall':
                //❗case by DappaUhuy&YOGI PW
                if (!isRegistered) return reply(ind.noregis())
                if (isLimit(sender)) return reply(ind.limitend(pusname))
                if (isBanned) return reply(ind.baned())
                if (args.length < 1) return reply(`Teksnya mana ngab?\nContoh ${prefix}breakwall DappaGanz`)
                dapuhy = body.slice(10)
                reply(ind.wait())
                asu = await getBuffer(`https://api.zeks.xyz/api/breakwall?apikey=apivinz&text=${dapuhy}`)
                dapyog.sendMessage(from, asu, image, {caption: 'Nih Jan Lupa Subscribe DappaUhuy&YOGI PW', quoted: mek})
                break
                case 'nulis':
                //❗case by DappaUhuy&YOGI PW
                if (!isRegistered) return reply(ind.noregis())
                if (isLimit(sender)) return reply(ind.limitend(pusname))
                if (isBanned) return reply(ind.baned())
                if (args.length < 1) return reply(`Teksnya mana ngab?\nContoh ${prefix}nulis DappaGanz`)
                dapuhy = body.slice(6)
                reply(ind.wait())
                asu = await getBuffer(`http://zekais-api.herokuapp.com/bukukanan?text=${dapuhy}`)
                dapyog.sendMessage(from, asu, image, {caption: 'Nih Jan Lupa Subscribe DappaUhuy&YOGI PW', quoted: mek})
                break
				case 'nulis2':
                //❗case by DappaUhuy&YOGI PW
                if (!isRegistered) return reply(ind.noregis())
                if (isLimit(sender)) return reply(ind.limitend(pusname))
                if (isBanned) return reply(ind.baned())
                if (args.length < 1) return reply(`Teksnya mana ngab?\nContoh ${prefix}nulis DappaGanz`)
                dapuhy = body.slice(7)
                reply(ind.wait())
                asu = await getBuffer(`http://zekais-api.herokuapp.com/bukukiri?text=${dapuhy}`)
                dapyog.sendMessage(from, asu, image, {caption: 'Nih Jan Lupa Subscribe DappaUhuy&YOGI PW', quoted: mek})
                break
                case 'nulis3':
                //❗case by DappaUhuy&YOGI PW
                if (!isRegistered) return reply(ind.noregis())
                if (isLimit(sender)) return reply(ind.limitend(pusname))
                if (isBanned) return reply(ind.baned())
                if (args.length < 1) return reply(`Teksnya mana ngab?\nContoh ${prefix}nulis DappaGanz`)
                dapuhy = body.slice(7)
                reply(ind.wait())
                asu = await getBuffer(`http://zekais-api.herokuapp.com/foliokanan?text=${dapuhy}`)
                dapyog.sendMessage(from, asu, image, {caption: 'Nih Jan Lupa Subscribe DappaUhuy&YOGI PW', quoted: mek})
                break
                case 'nulis4':
                //❗case by DappaUhuy&YOGI PW
                if (!isRegistered) return reply(ind.noregis())
                if (isLimit(sender)) return reply(ind.limitend(pusname))
                if (isBanned) return reply(ind.baned())
                if (args.length < 1) return reply(`Teksnya mana ngab?\nContoh ${prefix}nulis DappaGanz`)
                dapuhy = body.slice(7)
                reply(ind.wait())
                asu = await getBuffer(`http://zekais-api.herokuapp.com/foliokiri?text=${dapuhy}`)
                dapyog.sendMessage(from, asu, image, {caption: 'Nih Jan Lupa Subscribe DappaUhuy&YOGI PW', quoted: mek})
                break
//============================BATES NGAB============================\\
//FILM MENU
                case 'searchfilm':
                //❗case by DappaUhuy&YOGI PW
                if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
				if (isBanned) return reply(ind.baned())
				film = await fetchJson(`http://zekais-api.herokuapp.com/film?query=${body.slice(12)}`, {method: 'get'})
				teks = '=================\n'
				for (let i of film.result) {
					teks += `*Nama film* : ${i.name}\n*Quality* : ${i.quality}\n*Link* : ${i.url}\n=================\n`
					}
				reply(teks.trim())
				await limitAdd(sender)
				break
				case 'filmapikterbaru':
				//❗case by DappaUhuy&YOGI PW
                if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
				if (isBanned) return reply(ind.baned())
				film = await fetchJson(`http://zekais-api.herokuapp.com/filmapiklatest`, {method: 'get'})
				teks = '=================\n'
				for (let i of film.result) {
					teks += `*Nama film* : ${i.name}\n*Quality* : ${i.quality}\n*Rating* : ${i.rating}\n*Link* : ${i.url}\n=================\n`
					}
				reply(teks.trim())
				await limitAdd(sender)
				break
				case 'filmapikdrama':
				//❗case by DappaUhuy&YOGI PW
                if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
				if (isBanned) return reply(ind.baned())
				film = await fetchJson(`http://zekais-api.herokuapp.com/filmapiklatest`, {method: 'get'})
				teks = '=================\n'
				for (let i of film.result) {
					teks += `*Nama film* : ${i.name}\n*Quality* : ${i.quality}\n*Rating* : ${i.rating}\n*Link* : ${i.url}\n=================\n`
					}
				reply(teks.trim())
				await limitAdd(sender)
				break
				case 'filmapikdrama':
				//❗case by DappaUhuy&YOGI PW
                if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
				if (isBanned) return reply(ind.baned())
				film = await fetchJson(`http://zekais-api.herokuapp.com/filmapiklatest`, {method: 'get'})
				teks = '=================\n'
				for (let i of film.result) {
					teks += `*Nama film* : ${i.name}\n*Quality* : ${i.quality}\n*Rating* : ${i.rating}\n*Link* : ${i.url}\n=================\n`
					}
				reply(teks.trim())
				await limitAdd(sender)
				break
//============================BATES NGAB============================\\
//INFORMATION MENU
                case 'covidglobal':
                //❗case by DappaUhuy&YOGI PW
				if (!isRegistered) return reply(ind.noregis())
				if (isBanned) return reply('Maaf kamu sudah terbenned!')
				if (isLimit(sender)) return reply(ind.limitend(pusname))
				reply(ind.wait())
				anu = await fetchJson(`https://dapuhy-apikey.herokuapp.com/api/covidworld?apikey=dappabotwa`)
				teks = `Total Cases : ${anu.result.totalCases}\nRecovered : ${anu.result.recovered}\nDeaths : ${anu.result.deaths}\nActive Cases : ${anu.result.activeCases}\nClosed Cases : ${anu.result.closedCases}\nLast Update : ${anu.result.lastUpdate}`
				dapyog.sendMessage(from, teks, text, {quoted: mek, caption: 'Nih Jan Lupa Subscribe DappaUhuy&YOGI PW'})
				break
				case 'covidindo':
				//❗case by DappaUhuy&YOGI PW
				if (!isRegistered) return reply(ind.noregis())
				if (isBanned) return reply('Maaf kamu sudah terbenned!')
				if (isLimit(sender)) return reply(ind.limitend(pusname))
				dapyog.updatePresence(from, Presence.composing) 
				reply(ind.wait())
				asu = await fetchJson(`https://dapuhy-apikey.herokuapp.com/api/covidindo?apikey=dappabotwa`, {method: 'get'})
				teks = '=================\n'
				for (let i of asu.result) {
				teks += `Kode Provinsi: : ${i.attributes.Kode_Provi}\nProvinsi : ${i.attributes.Provinsi}\nTotal Positif : ${i.attributes.Kasus_Posi}\nTotal Sembuh : ${i.attributes.Kasus_Semb}\nTotal Meninggal : ${i.attributes.Kasus_Meni}\n=================\n`
				}
				reply(teks)
				break
				default:
       if (budy.includes(`@6285876330812`)) {
                  reply(`Jangan Tag Dappa Broh Dia Lagi Sibuk🗣`)
                  }
                 
       if (budy.includes(`@6283152753417`)) {
                  reply(`Jangan Tag Yogi Broh Dia Lagi Sibuk🗣`)
                  }
                  
			if (isGroup && !isCmd && isSimi && budy != undefined) {
						console.log(budy)
						muehe = await simih(budy)
						reply(ind.cmdnf(prefix, command))
					} else {
						console.log(color('[ERROR]','red'), 'Unregistered Command from', color(sender.split('@')[0]))
					}
					}
		} catch (e) {
			console.log('Error : %s', color(e, 'red'))
		}
	})
